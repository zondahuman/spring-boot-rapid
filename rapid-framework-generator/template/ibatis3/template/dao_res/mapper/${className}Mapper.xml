<#include "/macro.include"/>
<#assign className = table.className>   
<#assign classNameFirstLower = table.classNameFirstLower>   
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<#macro mapperEl value>${r"#{"}${value}}</#macro>
<#macro namespace>${className}.</#macro>
<#assign   ids="$\{ids}" />
<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="${basepackage}.${className}">

	<resultMap id="RM_${className}" type="${basepackage}.${className}">
        <#list table.columns as column>
        <result property="${column.columnNameLower}" column="${column.sqlName}"/>
		</#list>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		<#list table.columns as column>${column.sqlName}<#if column_has_next>,</#if></#list>
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="${table.idColumn.columnNameFirstLower}">
    <![CDATA[
        INSERT INTO ${table.sqlName} (
        <#list table.columns as column>
        	${column.sqlName} <#if column_has_next>,</#if>
        </#list>
        ) VALUES (
        <#list table.columns as column>
        	<@mapperEl column.columnNameFirstLower/> <#if column_has_next>,</#if>
        </#list>        
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>

	<!-- batch-insert-Object -->
	<insert id="insertBatch" useGeneratedKeys="true" parameterType="java.util.List">
		INSERT INTO ${table.sqlName} (
	        <#list table.columns as column>
	        	${column.sqlName} <#if column_has_next>,</#if>
	        </#list>
        ) VALUES 
		<foreach collection="list" item="item" index="index" separator="," >
			(
				<#list table.columns as column>
        			<@mapperEl "item."+column.columnNameFirstLower/> <#if column_has_next>,</#if>
        		</#list>  
       		)
		</foreach>
	</insert>
	
	
     <sql id="update_sql">
         <set>
          <#list table.notPkColumns as column>
            <#if column.isDateTimeColumn>
                <if test="${column.columnNameFirstLower} != null">
	         	${column.sqlName} = <@mapperEl column.columnNameFirstLower/> <#if column_has_next>,</#if>
	       </if>
	       </#if>  
	       <#if column.isNumberColumn>
                <if test="${column.columnNameFirstLower} != null">
	         	${column.sqlName} = <@mapperEl column.columnNameFirstLower/> <#if column_has_next>,</#if>
	         </if>
	       </#if>
	        <#if column.isStringColumn>
                <if test="${column.columnNameFirstLower} != null and ${column.columnNameFirstLower} != ''">
	         	${column.sqlName} = <@mapperEl column.columnNameFirstLower/> <#if column_has_next>,</#if>
	         </if>
	       </#if>
         </#list>  
       </set>
    </sql>
    
	<update id="update" >
	        UPDATE  ${table.sqlName}
	    <include refid="update_sql" />
	        WHERE 
		        <#list table.compositeIdColumns as column>
	                ${column.sqlName} = <@mapperEl column.columnNameLower/> <#if column_has_next> AND </#if>
	            </#list>	
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM ${table.sqlName} WHERE
        <#list table.compositeIdColumns as column>
        ${column.sqlName} = <@mapperEl 'id'/> <#if column_has_next> AND </#if>
		</#list>
    ]]>
    </delete>
    
    <delete id="delete_batch_string" parameterType="map">
    <![CDATA[
        DELETE FROM ${table.sqlName} WHERE id IN (${r"${ids}"})
    ]]>
    </delete>
    
    <delete id="delete_batch_array">
        DELETE FROM ${table.sqlName} WHERE id IN 
        <foreach item="item" collection="array" open="(" separator="," close=")">
			${r"#{item}"}
		</foreach>
    </delete>
    
    <delete id="delete_batch_list">
        DELETE FROM ${table.sqlName} WHERE id IN 
        <foreach item="item" collection="list" open="(" separator="," close=")">
			${r"#{item}"}
		</foreach>
    </delete>
    
    <select id="getById" resultMap="RM_${className}">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM ${table.sqlName} 
	        WHERE 
				<#list table.compositeIdColumns as column>
		        ${column.sqlName} = <@mapperEl 'id'/> <#if column_has_next> AND </#if>
		        </#list>    
	    ]]>
	</select>
	
	<sql id="findPage_where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <#list table.columns as column>
	       <#if column.isDateTimeColumn>
		       <if test="${column.columnNameFirstLower}Begin != null">
					AND ${column.sqlName} >= <@mapperEl column.columnNameFirstLower+"Begin"/>
			   </if>
			   <if test="${column.columnNameFirstLower}End != null">
					AND ${column.sqlName} &lt;= <@mapperEl column.columnNameFirstLower+"End"/>
			   </if>
	       <#else>
	       <#if column.isNumberColumn>
               <if test="${column.columnNameFirstLower} != null">
		             AND ${column.sqlName} = <@mapperEl column.columnNameFirstLower/>
	           </if>
	       </#if>
	        <#if column.isStringColumn>
                <if test="${column.columnNameFirstLower} != null and ${column.columnNameFirstLower} !=''">
		          <choose>  
				   <when test="selectType['${column.columnNameFirstLower}']==1">  
				      AND ${column.sqlName} like CONCAT('%', <@mapperEl column.columnNameFirstLower/>, '%')
				   </when>  
					<otherwise>  
					      AND ${column.sqlName} = <@mapperEl column.columnNameFirstLower/>
					   </otherwise>  
					</choose>
	            </if>
	       </#if>
	       </#if>
	       </#list>	
	         <if test="ids != null  and ids !=''">  
		        AND id in (${ids})
		   </if> 		
		</where>
	</sql>
		
    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM ${table.sqlName} 
		<include refid="findPage_where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="RM_${className}">
    	SELECT <include refid="columns" />
	    FROM ${table.sqlName} 
		<include refid="findPage_where"/>
		
		<if test="sortColumns != null and sortColumns !=''">
			ORDER BY <@jspEl 'sortColumns'/>
		</if>
    </select>

    <#list table.columns as column>
    <#if column.unique && !column.pk>
    <select id="getBy${column.columnName}" resultMap="RM_${className}" parameterType="${column.javaType}">
	    SELECT <include refid="columns"/>
	    <![CDATA[
	        FROM ${table.sqlName} where ${column.sqlName} = <@mapperEl column.columnNameLower/>
	    ]]>
    </select>
    
    </#if>
	</#list>
	
</mapper>

