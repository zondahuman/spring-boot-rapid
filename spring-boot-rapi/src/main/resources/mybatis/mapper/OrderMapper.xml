<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="com.abin.lee.rapid.framework.api.model.Order">

	<resultMap id="RM_Order" type="com.abin.lee.rapid.framework.api.model.Order">
        <result property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="businessId" column="business_id"/>
        <result property="orderName" column="order_name"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="version" column="version"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		id,user_id,business_id,order_name,create_time,update_time,version
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO `order` (
        	id ,
        	user_id ,
        	business_id ,
        	order_name ,
        	create_time ,
        	update_time ,
        	version 
        ) VALUES (
        	#{id} ,
        	#{userId} ,
        	#{businessId} ,
        	#{orderName} ,
        	#{createTime} ,
        	#{updateTime} ,
        	#{version} 
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>

	<!-- batch-insert-Object -->
	<insert id="insertBatch" useGeneratedKeys="true" parameterType="java.util.List">
		INSERT INTO `order` (
	        	id ,
	        	user_id ,
	        	business_id ,
	        	order_name ,
	        	create_time ,
	        	update_time ,
	        	version 
        ) VALUES 
		<foreach collection="list" item="item" index="index" separator="," >
			(
        			#{item.id} ,
        			#{item.userId} ,
        			#{item.businessId} ,
        			#{item.orderName} ,
        			#{item.createTime} ,
        			#{item.updateTime} ,
        			#{item.version} 
       		)
		</foreach>
	</insert>
	
	
     <sql id="update_sql">
         <set>
                <if test="userId != null">
	         	user_id = #{userId} ,
	         </if>
                <if test="businessId != null">
	         	business_id = #{businessId} ,
	         </if>
                <if test="orderName != null and orderName != ''">
	         	order_name = #{orderName} ,
	         </if>
                <if test="createTime != null">
	         	create_time = #{createTime} ,
	       </if>
                <if test="updateTime != null">
	         	update_time = #{updateTime} ,
	       </if>
                <if test="version != null">
	         	version = #{version} 
	         </if>
       </set>
    </sql>
    
	<update id="update" >
	        UPDATE  `order`
	    <include refid="update_sql" />
	        WHERE 
	                id = #{id} 
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM `order` WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <delete id="delete_batch_string" parameterType="map">
    <![CDATA[
        DELETE FROM `order` WHERE id IN (${ids})
    ]]>
    </delete>
    
    <delete id="delete_batch_array">
        DELETE FROM `order` WHERE id IN
        <foreach item="item" collection="array" open="(" separator="," close=")">
			#{item}
		</foreach>
    </delete>
    
    <delete id="delete_batch_list">
        DELETE FROM `order` WHERE id IN
        <foreach item="item" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
    </delete>
    
    <select id="getById" resultMap="RM_Order">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM `order`
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
	
	<sql id="findPage_where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
               <if test="id != null">
		             AND id = #{id}
	           </if>
               <if test="userId != null">
		             AND user_id = #{userId}
	           </if>
               <if test="businessId != null">
		             AND business_id = #{businessId}
	           </if>
                <if test="orderName != null and orderName !=''">
		          <choose>  
				   <when test="selectType['orderName']==1">  
				      AND order_name like CONCAT('%', #{orderName}, '%')
				   </when>  
					<otherwise>  
					      AND order_name = #{orderName}
					   </otherwise>  
					</choose>
	            </if>
		       <if test="createTimeBegin != null">
					AND create_time >= #{createTimeBegin}
			   </if>
			   <if test="createTimeEnd != null">
					AND create_time &lt;= #{createTimeEnd}
			   </if>
		       <if test="updateTimeBegin != null">
					AND update_time >= #{updateTimeBegin}
			   </if>
			   <if test="updateTimeEnd != null">
					AND update_time &lt;= #{updateTimeEnd}
			   </if>
               <if test="version != null">
		             AND version = #{version}
	           </if>
	         <if test="ids != null  and ids !=''">  
		        AND id in (${ids})
		   </if> 		
		</where>
	</sql>
		
    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM `order`
		<include refid="findPage_where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="RM_Order">
    	SELECT <include refid="columns" />
	    FROM `order`
		<include refid="findPage_where"/>
		
		<if test="sortColumns != null and sortColumns !=''">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

